default_platform(:android)

platform :ios do
  desc "Useful on CI, this lane installs Flutter."
  lane :bootstrap do
    flutter_bootstrap(flutter_channel: 'stable')
  end
end

platform :android do
  desc "Useful on CI, this lane installs Flutter and accepts some of the"
  desc "Android SDK licenses. Note that it does not install Android SDK itself,"
  desc "which is installed by Gradle automatically during the first build."
  desc "Nevertheless, ANDROID_SDK_ROOT or ANDROID_HOME environment variable"
  desc "must point to a destination directory (which might be empty)."
  lane :bootstrap do
    flutter_bootstrap(
      flutter_channel: 'stable',
      # Only do this when building for Android, otherwise we would enforce
      # existence of ANDROID_SDK_ROOT environment variable, which is completely
      # unnecessary when building for iOS.
      android_licenses: {
        'android-sdk-license' => '24333f8a63b6825ea9c5514f83c2829b004d1fee',
      },
    )
  end
end

desc "Generate files, format, lint and build project."
lane :build do
  # Generate intl and other files.
  flutter_generate(
    # File with all the Intl.message() calls.
    intl_strings_file: 'lib/strings.dart',
    # Actual locale of default values provided in that Dart file.
    intl_strings_locale: 'en_US',
    # Generate a file in test/ directory which imports all .dart files in the
    # project. This helps coverage tools account for files with zero coverage.
    coverage_all_imports: true,
  )

  # Reformat the source code.
  flutter(args: %w(format .))

  # Uncomment the following on CI. For Git repositories, it will verify that
  # 'format' and 'generate' actions didn't change anything from what a developer
  # has been doing.
  # ensure_git_status_clean

  # Lint (statically find errors).
  flutter(args: %w(analyze))

  build_args = []
  if lane_context[SharedValues::PLATFORM_NAME] == :android
    build_args << '--shrink'
  elsif lane_context[SharedValues::PLATFORM_NAME] == :ios
    build_args << '--no-codesign'
  end

  # Build a debug version of the app (release will require signing config).
  output_file = flutter_build(
    debug: true,

    # Uncomment the following to build a specific binary (apk, appbundle, ios
    # etc). When unspecified, the plugin will use Fastlane platform specific
    # default.
    #
    # build: 'appbundle',

    # Override version from pubspec.yaml.
    build_number: 123,
    build_name: '1.2.3',

    # Demo of custom build arguments appended to "flutter build" command line.
    build_args: build_args,
  )

  # Once flutter_build() completes, it sets context variables which are then
  # automatically detected by upload_to_testflight (pilot), upload_to_app_store
  # (deliver) and upload_to_play_store (supply) actions, so those do not need to
  # be configured any further.

  UI.success("Built #{output_file}!")
end

######## Internal tests for the plugin ########

# TODO(dotdoom): find a way of launching platform-agnostic lane with a platform:
#                $ bundle exec fastlane ios end_to_end_test
#                without resorting to creating multiple lanes.
platform :ios do
  lane :end_to_end_test do
    platform_agnostic_end_to_end_test
  end
end
platform :android do
  lane :end_to_end_test do
    platform_agnostic_end_to_end_test
  end
end

desc "This is an internal test for Fastlane Flutter plugin. You shouldn't"
desc "need to do anything like that in your Fastfile."
desc "It uses 'bootstrap' lane from above to install Flutter, then creates a"
desc "temporary (but real) Flutter project, and builds it via 'build' lane."
lane :platform_agnostic_end_to_end_test do
  # The block version doesn't work on Windows for some reason:
  # `rmdir': [!] Directory not empty @ dir_s_rmdir
  root = Dir.mktmpdir('fastlane-plugin-flutter-')
  begin
    # Override environment in case Flutter / Android SDK is preinstalled. In
    # this test, we want to really test full installation procedure.
    ENV.delete('ANDROID_HOME')
    ENV['ANDROID_SDK_ROOT'] = File.join(root, 'android')

    # Install our dependencies to this temporary directory.
    bootstrap

    app = File.join(root, 'myapp')
    flutter(args: ['create', app])

    # Add dependencies on built_value and intl, and add some code to trigger
    # (and validate) generators.
    pubspec = File.join(app, 'pubspec.yaml')
    File.write(pubspec, File.read(pubspec).sub(
      "dependencies:",
      "dependencies:\n" \
      "  built_value:\n"
    ).sub(
      "dev_dependencies:",
      "dev_dependencies:\n" \
      "  build_runner:\n" \
      "  built_value_generator:\n" \
      "  intl_translation:\n"
    ))

    File.write(File.join(app, 'lib', 'strings.dart'), <<-'DART')
      import 'package:intl/intl.dart';
      class Strings {
        static String get helloWorld => Intl.message(
              'Hello World',
              name: 'helloWorld',
              desc: 'Hello World text on the splash screen',
            );
      }
    DART

    File.write(File.join(app, 'lib', 'message.dart'), <<-'DART')
      import 'package:built_value/built_value.dart';
      part 'message.g.dart';
      abstract class Message implements Built<Message, MessageBuilder> {
        String get text;
        factory Message([void Function(MessageBuilder) updates]) = _$Message;
        Message._();
      }
    DART

    File.write(File.join(app, 'lib', 'splash.dart'), <<-'DART')
      import 'strings.dart';
      import 'message.dart';
      // messages_all.dart file should be generated by Intl.
      import 'messages_all.dart' as messages_all;
      Future<Message> splashScreenMessage() async {
        await messages_all.initializeMessages('en_US');
        // MessageBuilder class should be generated by built_value.
        return (MessageBuilder()..text = Strings.helloWorld).build();
      }
    DART

    # A little hack. Since Fastlane always runs actions in 1 directory level
    # above current, we have to chdir 1 level into application dir structure:
    # https://docs.fastlane.tools/advanced/fastlane/#directory-behavior
    fastlane = File.join(app, 'fastlane')
    Dir.mkdir(fastlane)
    Dir.chdir(fastlane) do
      # Now that we've created our test application, run a real lane.
      build

      # Call build one more time with files already generated, as we expect it
      # to be idempotent.
      build

      # Call bootstrap one more time with Flutter already installed. This is
      # to ensure that upgrade path in our plugin is working correctly.
      bootstrap
    end
  ensure
    fastlane_require('fileutils')
    FileUtils.rm_rf(root)
  end
end
